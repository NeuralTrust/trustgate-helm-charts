#!/bin/bash

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Check if jq is installed
if ! command -v jq &> /dev/null; then
    echo -e "${RED}Error: jq is not installed. Please install jq to run this script.${NC}"
    echo "On Ubuntu/Debian: sudo apt-get install jq"
    echo "On CentOS/RHEL: sudo yum install jq"
    echo "On macOS: brew install jq"
    exit 1
fi

# Pre-configured endpoints from deployment
ADMIN_URL="http://localhost:8080/api/v1"  
PROXY_URL="http://localhost:8081"
BASE_DOMAIN="{{SERVER_BASE_DOMAIN}}"
SERVICE_NAME="rate-limiter-service-$(date +%s)"
UPSTREAM_NAME="rate-limiter-upstream-$(date +%s)"

echo -e "${GREEN}Using the following endpoints:${NC}"
echo "Admin API: $ADMIN_URL"
echo "Proxy API: $PROXY_URL"
echo "Base Domain: $BASE_DOMAIN"

# Generate a unique subdomain for this test
EXAMPLE_SUBDOMAIN="gateway-test-$(date +%s)"
echo -e "\n${GREEN}Using subdomain: $EXAMPLE_SUBDOMAIN${NC}"

# Step 1: Create a gateway with rate limiting plugin
echo -e "\n${GREEN}1. Creating gateway with rate limiting plugin...${NC}"
GATEWAY_RESPONSE=$(curl -s -X POST "$ADMIN_URL/gateways" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Rate Limited Gateway",
    "subdomain": "'$EXAMPLE_SUBDOMAIN'",
    "required_plugins": [
        {
            "name": "rate_limiter",
            "enabled": true,
            "stage": "pre_request",
            "priority": 1,
            "settings": {
                "limits": {
                    "global": {
                        "limit": 5,
                        "window": "30s"
                    },
                    "per_ip": {
                        "limit": 3,
                        "window": "30s"
                    }
                },
                "actions": {
                    "type": "reject",
                    "retry_after": "30"
                }
            }
        }
    ]
}')

# Check if the gateway was created successfully
if echo "$GATEWAY_RESPONSE" | jq -e '.id' > /dev/null; then
    GATEWAY_ID=$(echo "$GATEWAY_RESPONSE" | jq -r '.id')
    SUBDOMAIN=$(echo "$GATEWAY_RESPONSE" | jq -r '.subdomain')
    echo -e "${GREEN}Gateway created successfully with ID: $GATEWAY_ID${NC}"
    echo -e "${GREEN}Subdomain: $SUBDOMAIN${NC}"
else
    echo -e "${RED}Failed to create gateway. Response:${NC}"
    echo "$GATEWAY_RESPONSE" | jq
    exit 1
fi

# Step 2: Create an API key for the gateway
echo -e "\n${GREEN}2. Creating API key for the gateway...${NC}"
API_KEY_RESPONSE=$(curl -s -X POST "$ADMIN_URL/gateways/$GATEWAY_ID/keys" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Test Key",
    "expires_at": "2026-01-01T00:00:00Z"
}')

# Check if the API key was created successfully
if echo "$API_KEY_RESPONSE" | jq -e '.key' > /dev/null; then
    API_KEY=$(echo "$API_KEY_RESPONSE" | jq -r '.key')
    echo -e "${GREEN}API key created successfully: $API_KEY${NC}"
else
    echo -e "${RED}Failed to create API key. Response:${NC}"
    echo "$API_KEY_RESPONSE" | jq
    exit 1
fi

# Step 3: Create an upstream pointing to the health endpoint
echo -e "\n${GREEN}3. Creating upstream pointing to the health endpoint...${NC}"
UPSTREAM_RESPONSE=$(curl -s -X POST "$ADMIN_URL/gateways/$GATEWAY_ID/upstreams" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "'$UPSTREAM_NAME'",
    "algorithm": "round-robin",
    "targets": [{
        "host": "httpbin.org",
        "port": 443,
        "protocol": "https",
        "weight": 100,
        "priority": 1
    }],
    "health_checks": {
        "passive": true,
        "threshold": 3,
        "interval": 60
    }
}')

# Check if the upstream was created successfully
if echo "$UPSTREAM_RESPONSE" | jq -e '.id' > /dev/null; then
    UPSTREAM_ID=$(echo "$UPSTREAM_RESPONSE" | jq -r '.id')
    echo -e "${GREEN}Upstream created successfully with ID: $UPSTREAM_ID${NC}"
else
    echo -e "${RED}Failed to create upstream. Response:${NC}"
    echo "$UPSTREAM_RESPONSE" | jq
    exit 1
fi

# Step 4: Create a service using the upstream
echo -e "\n${GREEN}4. Creating service using the upstream...${NC}"
SERVICE_RESPONSE=$(curl -s -X POST "$ADMIN_URL/gateways/$GATEWAY_ID/services" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "'$SERVICE_NAME'",
    "type": "upstream",
    "description": "Health check service",
    "upstream_id": "'$UPSTREAM_ID'"
}')

# Check if the service was created successfully
if echo "$SERVICE_RESPONSE" | jq -e '.id' > /dev/null; then
    SERVICE_ID=$(echo "$SERVICE_RESPONSE" | jq -r '.id')
    echo -e "${GREEN}Service created successfully with ID: $SERVICE_ID${NC}"
else
    echo -e "${RED}Failed to create service. Response:${NC}"
    echo "$SERVICE_RESPONSE" | jq
    exit 1
fi

# Step 5: Create a rule to route traffic to the service
echo -e "\n${GREEN}5. Creating rule to route traffic to the service...${NC}"
RULE_RESPONSE=$(curl -s -X POST "$ADMIN_URL/gateways/$GATEWAY_ID/rules" \
  -H "Content-Type: application/json" \
  -d '{
    "path": "/test",
    "service_id": "'$SERVICE_ID'",
    "methods": ["GET", "POST"],
    "strip_path": true,
    "active": true
}')

# Check if the rule was created successfully
if echo "$RULE_RESPONSE" | jq -e '.id' > /dev/null; then
    RULE_ID=$(echo "$RULE_RESPONSE" | jq -r '.id')
    echo -e "${GREEN}Rule created successfully with ID: $RULE_ID${NC}"
else
    echo -e "${RED}Failed to create rule. Response:${NC}"
    echo "$RULE_RESPONSE" | jq
    exit 1
fi

# Save configuration for future use
echo "GATEWAY_ID=$GATEWAY_ID" > trustgate_test.txt
echo "SUBDOMAIN=$SUBDOMAIN" >> trustgate_test.txt
echo "API_KEY=$API_KEY" >> trustgate_test.txt
echo "UPSTREAM_ID=$UPSTREAM_ID" >> trustgate_test.txt
echo "SERVICE_ID=$SERVICE_ID" >> trustgate_test.txt
echo "RULE_ID=$RULE_ID" >> trustgate_test.txt

# Step 6: Test the service and rate limiter
echo -e "\n${BLUE}========== TESTING RATE LIMITER ===========${NC}"
echo -e "${GREEN}We configured a rate limit of 5 requests per 30 seconds globally${NC}"
echo -e "${GREEN}and 3 requests per 30 seconds per IP address${NC}"

# Function to make a request and display the result
make_request() {
  local request_num=$1
  echo -e "\n${YELLOW}Request #$request_num:${NC}"
  
  RESPONSE=$(curl -s -w "\n%{http_code}" "$PROXY_URL/test" \
    -H "Host: $SUBDOMAIN.$BASE_DOMAIN" \
    -H "X-API-Key: $API_KEY")
  
  HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
  BODY=$(echo "$RESPONSE" | head -n1)
  
  if [ "$HTTP_CODE" == "200" ]; then
    echo -e "${GREEN}Success! HTTP 200 OK${NC}"
    echo -e "${BLUE}Response:${NC} $(echo "$BODY" | jq -c '.' 2>/dev/null || echo "$BODY")"
  elif [ "$HTTP_CODE" == "429" ]; then
    RETRY_AFTER=$(curl -s -I "$PROXY_URL/test" \
      -H "Host: $SUBDOMAIN.$BASE_DOMAIN" \
      -H "X-API-Key: $API_KEY" | grep -i "retry-after" | awk '{print $2}' | tr -d '\r')
    
    echo -e "${RED}Rate limited! HTTP 429 Too Many Requests${NC}"
    echo -e "${YELLOW}Retry-After: $RETRY_AFTER seconds${NC}"
    echo -e "${BLUE}Response:${NC} $(echo "$BODY" | jq -c '.' 2>/dev/null || echo "$BODY")"
  else
    echo -e "${RED}Unexpected response! HTTP $HTTP_CODE${NC}"
    echo -e "${BLUE}Response:${NC} $(echo "$BODY" | jq -c '.' 2>/dev/null || echo "$BODY")"
  fi
}

# Make 8 requests to test rate limiting
echo -e "\n${GREEN}Making 8 requests to test rate limiting...${NC}"
for i in {1..8}; do
  make_request $i
  sleep 1
done

echo -e "\n${BLUE}========== RATE LIMITER TEST SUMMARY ===========${NC}"
echo -e "${GREEN}Gateway ID:${NC} $GATEWAY_ID"
echo -e "${GREEN}Subdomain:${NC} $SUBDOMAIN"
echo -e "${GREEN}API Key:${NC} $API_KEY"
echo -e "${GREEN}Second API Key:${NC} $SECOND_API_KEY"
echo -e "${GREEN}Configuration saved to:${NC} trustgate_test.txt"
echo -e "\n${YELLOW}The rate limiter was configured with:${NC}"
echo -e "- Global limit: 5 requests per 30 seconds"
echo -e "- Per IP limit: 3 requests per 30 seconds"
echo -e "- Retry-After: 30 seconds" 