Thank you for installing {{ .Chart.Name }}.

Your TrustGate deployment is now being set up. This may take a few minutes.

{{- if .Values.ingress.enabled }}
You can access the TrustGate services at:
  - Control Plane: https://{{ .Values.ingress.controlPlane.host }}
  - Data Plane: https://{{ .Values.ingress.dataPlane.host }}
{{- if .Values.firewall.enabled }}
  - Firewall API: https://{{ .Values.ingress.firewall.host | default "firewall.example.com" }}
{{- end }}
{{- else }}
To get the IP addresses for your TrustGate services:

1. For the Control Plane:
   kubectl get svc {{ .Release.Name }}-control-plane -n {{ .Release.Namespace }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'

2. For the Data Plane:
   kubectl get svc {{ .Release.Name }}-data-plane -n {{ .Release.Namespace }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'

{{- if .Values.firewall.enabled }}
3. For the Firewall API:
   kubectl get svc {{ .Release.Name }}-firewall -n {{ .Release.Namespace }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
{{- end }}

If you're using NodePort instead of LoadBalancer, get the NodePort and any node IP:
   Control Plane port: kubectl get svc {{ .Release.Name }}-control-plane -n {{ .Release.Namespace }} -o jsonpath='{.spec.ports[0].nodePort}'
   Data Plane port: kubectl get svc {{ .Release.Name }}-data-plane -n {{ .Release.Namespace }} -o jsonpath='{.spec.ports[0].nodePort}'
{{- if .Values.firewall.enabled }}
   Firewall API port: kubectl get svc {{ .Release.Name }}-firewall -n {{ .Release.Namespace }} -o jsonpath='{.spec.ports[0].nodePort}'
{{- end }}
   Node IP: kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}'
{{- end }}

For more information on using TrustGate, please visit:
https://docs.neuraltrust.ai

To view the status of your deployment:
  kubectl get pods -n {{ .Release.Namespace }}

Access URLs:
{{- if .Values.ingress.enabled }}
1. Access the Control Plane API at:
   https://{{ .Values.ingress.controlPlane.host }}

2. Access the Data Plane API at:
   https://{{ .Values.ingress.dataPlane.host }}

{{- else }}
1. Get the Control Plane URL by running these commands:
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "trustgate.name" . }},app.kubernetes.io/instance={{ .Release.Name }},component=control-plane" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT

2. Get the Data Plane URL by running these commands:
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "trustgate.name" . }},app.kubernetes.io/instance={{ .Release.Name }},component=data-plane" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8081 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8081:$CONTAINER_PORT
{{- end }}

{{- if .Values.postgresql.enabled }}
3. PostgreSQL can be accessed on the following DNS name from within your cluster:
    {{ include "trustgate.fullname" . }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432
{{- end }}

{{- if .Values.redis.enabled }}
4. Redis can be accessed on the following DNS name from within your cluster:
    {{ include "trustgate.fullname" . }}-redis-headless.{{ .Release.Namespace }}.svc.cluster.local:6379
{{- end }}

Initial setup:
1. Ensure your DNS records are configured for the above hostnames
2. Configure your first API Gateway:
   curl -X POST https://{{ .Values.ingress.controlPlane.host }}/api/v1/gateways \
     -H "Content-Type: application/json" \
     -d '{"name": "my-gateway", "subdomain": "api.example.com"}'

Monitor the deployment:
{{- if .Values.monitoring.serviceMonitor.enabled }}
- Metrics are available via ServiceMonitor
- Check Grafana for pre-configured dashboards
{{- end }}

Get the application logs:
  kubectl logs -n {{ .Release.Namespace }} -l "app.kubernetes.io/instance={{ .Release.Name }}" -f

{{- if .Values.firewall.enabled }}
-------------------------------------------------
FIREWALL API CONFIGURATION
-------------------------------------------------

To use the Firewall API, you need to include the JWT token in your requests.
The JWT token has been generated during installation and saved to firewall_jwt_credentials.txt.

Example request to the Firewall API:

curl -X POST https://{{ if .Values.ingress.enabled }}{{ .Values.ingress.firewall.host | default "firewall.example.com" }}{{ else }}FIREWALL_IP:PORT{{ end }}/v1/firewall \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{"input": "Your text to scan"}'

To get your JWT token:
  cat firewall_jwt_credentials.txt

The Firewall API supports the following endpoints:
- POST /api/v1/firewall - Scan text for harmful content
- GET /api/v1/health - Check the health of the firewall service

For more information on the Firewall API, please refer to the documentation.
{{- end }}

Need help? Visit:
- Documentation: https://docs.neuraltrust.ai
- Community: https://join.slack.com/t/neuraltrustcommunity/shared_invite/zt-2xl47cag6-_HFNpltIULnA3wh4R6AqBg
- Issues: https://github.com/NeuralTrust/TrustGate/issues

{{ if .Values.postgresql.enabled -}}
NOTE: PostgreSQL is enabled. Make sure to backup your data regularly.
{{- end }} 